import {Component, OnInit} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {NgForOf, NgIf} from '@angular/common';

@Component({
  selector: 'app-root',
  imports: [NgIf, NgForOf],
  templateUrl: './app.html',
  styleUrl: './app.scss'
})
export class App implements OnInit {
  users: any[] = [];
  videos: any[] = [];
  messages = {
    email: '',
    upload: '',
    video: ''
  };

  constructor(private http: HttpClient) {
  }

  ngOnInit() {
    this.loadVideos();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  loadData() {
    this.http.get<any[]>('/api/users').subscribe({
      next: (users) => {
        this.users = users;
      },
      error: (error) => {
        this.showMessage('upload', 'error', `‚ùå ${error.message}`);
      }
    });
  }

  // –≠–∫—Å–ø–æ—Ä—Ç CSV
  exportCSV() {
    window.open('/api/export-csv', '_blank');
  }

  // –ò–º–ø–æ—Ä—Ç CSV
  uploadCSV(event: any) {
    const file = event.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    this.showMessage('upload', 'loading', '–ó–∞–≥—Ä—É–∑–∫–∞...');

    this.http.post<any>('/api/upload-csv', formData).subscribe({
      next: (result) => {
        this.showMessage('upload', 'success', `‚úÖ –£—Å–ø–µ—Ö! –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${result.rows || 0}`);
        this.loadData();
        event.target.value = '';
      },
      error: (error) => {
        this.showMessage('upload', 'error', `‚ùå –û—à–∏–±–∫–∞: ${error.error?.message || error.message}`);
      }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ email
  sendCSVByEmail() {
    this.showMessage('email', 'loading', '–û—Ç–ø—Ä–∞–≤–∫–∞...');

    this.http.post<any>('/api/send-csv-email', {}).subscribe({
      next: () => {
        this.showMessage('email', 'success', '‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É');
      },
      error: (error) => {
        this.showMessage('email', 'error', `‚ùå –û—à–∏–±–∫–∞: ${error.error?.message || error.message}`);
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
  uploadVideo(event: any) {
    const file = event.target.files[0];
    if (!file) return;

    if (file.size > 100 * 1024 * 1024) {
      this.showMessage('video', 'error', '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 100MB)');
      return;
    }

    const formData = new FormData();
    formData.append('video', file);

    this.showMessage('video', 'loading', '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...');

    this.http.post<any>('/api/upload-video', formData).subscribe({
      next: (result) => {
        this.showMessage('video', 'success', `‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${result.filename}`);
        this.loadVideos();
        event.target.value = '';
      },
      error: (error) => {
        this.showMessage('video', 'error', `‚ùå –û—à–∏–±–∫–∞: ${error.error?.message || error.message}`);
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
  loadVideos() {
    this.http.get<any[]>('/api/videos').subscribe({
      next: (videos) => {
        this.videos = videos;
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
      }
    });
  }

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ
  viewVideo(filename: string) {
    const videoUrl = `/api/video/${filename}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –ø—É—Ç—å

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø —ç–ª–µ–º–µ–Ω—Ç
    const popup = document.createElement('div');
    popup.className = 'video-popup';
    popup.innerHTML = `
    <div class="video-popup-overlay"></div>
    <div class="video-popup-content">
      <div class="video-popup-header">
        <h3>${filename}</h3>
        <button class="close-btn">√ó</button>
      </div>
      <div class="video-container">
        <video controls autoplay preload="metadata" playsinline>
          <source src="${videoUrl}" type="video/mp4">
          –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Ç–µ–≥.
        </video>
        <div class="video-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</div>
        <div class="video-error" style="display: none;">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
        </div>
      </div>
      <div class="video-info">
        <div class="video-stats">
          <span>üìä –ó–∞–≥—Ä—É–∑–∫–∞: <span class="load-status">0%</span></span>
          <span>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <span class="duration-status">--:--</span></span>
        </div>
      </div>
    </div>
  `;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø–∞–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(popup);
    document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    const video = popup.querySelector('video') as HTMLVideoElement;
    const closeBtn = popup.querySelector('.close-btn') as HTMLButtonElement;
    const overlay = popup.querySelector('.video-popup-overlay') as HTMLDivElement;
    const loadingEl = popup.querySelector('.video-loading') as HTMLDivElement;
    const errorEl = popup.querySelector('.video-error') as HTMLDivElement;
    const loadStatus = popup.querySelector('.load-status') as HTMLSpanElement;
    const durationStatus = popup.querySelector('.duration-status') as HTMLSpanElement;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–µ–æ
    if (video) {
      video.addEventListener('loadstart', () => {
        loadingEl.style.display = 'block';
      });

      video.addEventListener('loadeddata', () => {
        loadingEl.style.display = 'none';
      });

      video.addEventListener('progress', () => {
        if (video.buffered.length > 0) {
          const bufferedEnd = video.buffered.end(video.buffered.length - 1);
          const duration = video.duration;
          if (duration > 0) {
            const percent = (bufferedEnd / duration * 100).toFixed(1);
            loadStatus.textContent = `${percent}%`;
          }
        }
      });

      video.addEventListener('loadedmetadata', () => {
        const duration = video.duration;
        if (duration && isFinite(duration)) {
          const minutes = Math.floor(duration / 60);
          const seconds = Math.floor(duration % 60);
          durationStatus.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
      });

      video.addEventListener('error', () => {
        loadingEl.style.display = 'none';
        errorEl.style.display = 'block';
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', video.error);
      });

      video.addEventListener('canplaythrough', () => {
        loadingEl.style.display = 'none';
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      setTimeout(() => video.focus(), 100);
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞
    const closePopup = () => {
      if (video) {
        video.pause();
        video.src = ''; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      }
      popup.remove();
      document.body.style.overflow = '';
      document.removeEventListener('keydown', closeOnEsc);
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
    closeBtn.addEventListener('click', closePopup);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
    overlay.addEventListener('click', closePopup);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const closeOnEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        closePopup();
      }
    };
    document.addEventListener('keydown', closeOnEsc);

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–∞–º–æ –≤–∏–¥–µ–æ
    const videoContent = popup.querySelector('.video-popup-content') as HTMLDivElement;
    videoContent.addEventListener('click', (event) => {
      event.stopPropagation();
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
  deleteVideo(filename: string) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ "${filename}"?`)) return;

    this.http.delete(`/api/delete-video/${filename}`).subscribe({
      next: () => {
        alert('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
        this.loadVideos();
      },
      error: (error) => {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.error?.message || error.message}`);
      }
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
  private showMessage(type: 'email' | 'upload' | 'video', status: 'success' | 'error' | 'loading', text: string) {
    this.messages[type] = text;

    // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    if (status !== 'loading') {
      setTimeout(() => {
        this.messages[type] = '';
      }, 5000);
    }
  }
}
