name: Deploy Full Stack App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for Angular
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install and build Angular
        run: |
          cd frontend
          npm install
          npm run build:prod
          echo "=== Angular build files ==="
          ls -la dist/browser/

      - name: Setup Go for backend
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.5'

      - name: Build Go backend
        run: |
          cd backend
          go mod download
          GOOS=linux GOARCH=amd64 go build -o app main.go
          echo "=== Go binary built ==="
          ls -la

      - name: Deploy full stack
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          
          echo "Deploying Angular frontend..."
          scp -i ~/.ssh/key \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -r frontend/dist/browser/* deploy@${{ secrets.VM_HOST }}:/var/www/your-app/
          
          echo "Deploying Go backend..."
          scp -i ~/.ssh/key \
              -o StrictHostKeyChecking=no \
              backend/app deploy@${{ secrets.VM_HOST }}:/var/www/your-app/
          
          # Копируем необходимые Go файлы если нужно
          scp -i ~/.ssh/key \
              -o StrictHostKeyChecking=no \
              backend/go.mod backend/go.sum deploy@${{ secrets.VM_HOST }}:/var/www/your-app/ 2>/dev/null || echo "No go.mod/go.sum to copy"

      - name: Install MySQL on server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no deploy@${{ secrets.VM_HOST }} "
            echo '=== Installing MySQL ==='
            sudo apt update
            # Пробуем установить mysql-server, если не получится - используем mariadb
            if sudo apt install -y mysql-server; then
              echo 'MySQL server installed successfully'
              DB_SERVICE='mysql'
            else
              echo 'MySQL not available, installing MariaDB instead'
              sudo apt install -y mariadb-server
              DB_SERVICE='mariadb'
            fi
          
            echo '=== Starting database service ==='
            sudo systemctl start \$DB_SERVICE
            sudo systemctl enable \$DB_SERVICE
          
            echo '=== Creating database and user ==='
            sudo mysql -e \"
            CREATE DATABASE IF NOT EXISTS myapp;
            CREATE USER IF NOT EXISTS 'myuser'@'localhost' IDENTIFIED BY 'mypassword';
            GRANT ALL PRIVILEGES ON myapp.* TO 'myuser'@'localhost';
            FLUSH PRIVILEGES;
            \"
          
            echo '=== Database status ==='
            sudo systemctl status \$DB_SERVICE
            echo '=== Database version ==='
            mysql --version
          "

      - name: Setup application on server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no deploy@${{ secrets.VM_HOST }} "
            echo '=== Setting up application ==='
            cd /var/www/your-app
          
            # Даем права на бинарник Go
            chmod +x app
          
            # Создаем systemd service для надежного запуска
            sudo tee /etc/systemd/system/myapp.service > /dev/null << 'SERVICE'
            [Unit]
            Description=My Go Application
            After=network.target mysql.service mariadb.service
          
            [Service]
            Type=simple
            User=deploy
            WorkingDirectory=/var/www/your-app
            ExecStart=/var/www/your-app/app
            Restart=always
            RestartSec=3
            Environment=PORT=8080
          
            [Install]
            WantedBy=multi-user.target
            SERVICE
          
            # Перезагружаем systemd и включаем автозапуск
            sudo systemctl daemon-reload
            sudo systemctl enable myapp.service
            sudo systemctl restart myapp.service
          
            echo '=== Application status ==='
            sudo systemctl status myapp.service
            echo '=== Application logs ==='
            sudo journalctl -u myapp.service -n 10 --no-pager
          "

      - name: Verify deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          
          echo '=== Verifying deployment ==='
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no deploy@${{ secrets.VM_HOST }} "
            echo '1. Checking running processes:'
            ps aux | grep app | grep -v grep
            echo '2. Checking service status:'
            sudo systemctl status myapp.service --no-pager
            echo '3. Checking database connection:'
            sudo mysql -e 'SHOW DATABASES;' | grep myapp
            echo '4. Checking web server:'
            curl -s http://localhost:8080/ | head -2
            echo '5. Checking nginx:'
            sudo systemctl status nginx --no-pager
          "
          
          echo '🎉 Full stack deployment completed!'
          echo '🌐 Frontend: http://${{ secrets.VM_HOST }}/'
          echo '🔧 Backend API: http://${{ secrets.VM_HOST }}:8080/'
          echo '📊 MySQL database: myapp (user: myuser)'

      - name: Health check
        run: |
          echo '=== Final health check ==='
          echo 'Waiting for services to start...'
          sleep 10
          
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no deploy@${{ secrets.VM_HOST }} "
            echo 'Services status:'
            sudo systemctl status nginx --no-pager | head -5
            sudo systemctl status myapp.service --no-pager | head -5
            echo 'Recent application logs:'
            sudo journalctl -u myapp.service -n 5 --no-pager
          "